@use '../abstracts' as *;

@property --gradient-angle {
  syntax: '<angle>';
  initial-value: 0deg;
  inherits: false;
}

@keyframes rotation {
  0% {
    --gradient-angle: 0deg;
  }
  100% {
    --gradient-angle: 360deg;
  }
}

@keyframes blur {
  0% {
    filter: blur(0.65rem);
  }
  100% {
    filter: blur(2rem);
  }
}

.button {
  display: inline-flex;
  cursor: pointer;
  text-decoration: none;
  line-height: 1;

  position: relative;

  font-family: $button-font-family;
  font-size: $button-font-size;
  font-weight: $button-font-weight;

  padding: $button-padding-default;
  text-transform: $button-text-transform;
  border: $button-border-default;
  border-radius: $button-border-radius;
  transition: $button-transition;

  &[data-type='primary'] {
    background-color: $button-primary-background;
    color: $button-primary-color;

    &:is(:hover, :focus) {
      background: $button-primary-background-hover;
      color: $button-primary-color-hover;
    }
  }

  &[data-type='accent'] {
    background: $button-accent-background;
    color: $button-accent-color;

    &:is(:hover, :focus) {
      background: $button-accent-background-hover;
      color: $button-accent-color-hover;
    }
  }

  &[data-type='gradient'] {
    background: $button-gradient-background;
    color: $button-gradient-color;
    transition: background 400ms, filter 400ms;

    &::before,
    &::after {
      content: '';
      z-index: -1;
      position: absolute;
      border-radius: inherit;
      inset: $button-gradient-border-width;
      background-image: conic-gradient(
        from var(--gradient-angle),
        $button-gradient-conic
      );
      animation: rotation 20s linear infinite;
    }

    &::after {
      opacity: 0.65;
      filter: blur(0.65rem);
      // transition: filter 500ms;
      // animation: blur 3s alternate infinite;
    }

    &:hover {
      background: $button-gradient-background-hover;
      color: $button-gradient-color-hover;

      &::after {
        opacity: 0.75;
        // filter: blur(2rem);
        animation: blur 1.5s alternate infinite;
      }
    }

    &:active {
      filter: brightness(120%);
    }
  }

  // &[data-type='gradient'] {
  //   color: $button-gradient-color;
  //   cursor: pointer;

  //   border: 3px solid transparent;
  //   background: linear-gradient(
  //         $button-gradient-background,
  //         $button-gradient-background
  //       )
  //       padding-box,
  //     conic-gradient(from 360deg, $button-gradient-conic) border-box;
  // }

  &[data-type='gooey'] {
    $prime: #00ff80;
    $second: #0c1016;

    color: $second;
    border: none;
    background: $prime;
    position: relative;

    filter: url('#gooey');

    &:focus {
      outline: none;
    }

    .bubbles {
      // position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;

      .bubble {
        background-color: $prime;
        border-radius: 100%;
        position: absolute;
        top: 0;
        left: 0;
        display: block;
        z-index: -1;

        @for $bubble from 1 through 10 {
          &:nth-child(#{$bubble}) {
            $size: 25px;
            left: (random(90) + 10) + px;
            width: $size;
            height: $size;
            animation: move-#{$bubble} #{3 + $bubble * 0.02}s infinite;
            animation-delay: #{$bubble * 0.2}s;
          }
        }
      }
    }
  }
}

// Gooey Bubbles
svg {
  position: absolute;
  top: -4000px;
  left: -4000px;
}

@for $bubble from 1 through 10 {
  @keyframes move-#{$bubble} {
    0% {
      transform: translate(0, 0);
    }
    99% {
      transform: translate(0, -(random(80) + 50) + px);
    }
    100% {
      transform: translate(0, 0);
      opacity: 0;
    }
  }
}
